# main.py
import os
import json
import streamlit as st
from dotenv import load_dotenv
from pathlib import Path

# Gemini SDK
import google.generativeai as genai

# ---------------------------
# Setup
# ---------------------------
load_dotenv(dotenv_path=Path(__file__).with_name(".env"))
API_KEY = os.getenv("GOOGLE_API_KEY", "").strip()

st.set_page_config(
    page_title="Projeto Final - Agente IA p/ Engenharia de Software",
    page_icon="ü§ñ",
    layout="wide",
)

st.title("ü§ñ BugSage")

# ---------------------------
# Sidebar
# ---------------------------
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes")
    if not API_KEY:
        st.error("Vari√°vel de ambiente GOOGLE_API_KEY n√£o encontrada. Crie um arquivo `.env` com a chave.")

    model_name = st.selectbox("Modelo Gemini", ["gemini-1.5-flash", "gemini-1.5-pro"], index=0)
    temperature = st.slider("Temperatura", 0.0, 1.0, 0.3, 0.1)



    st.markdown("---")
    # Menu sem tabs
    view = st.radio(
        "Navega√ß√£o",
        ["üß™ Gerar testes unit√°rios"],  # adicione outras telas aqui depois, se quiser
        index=0,
    )

# ---------------------------
# Gemini helpers
# ---------------------------
def _configure_model():
    if not API_KEY:
        return None
    try:
        genai.configure(api_key=API_KEY)
        return genai.GenerativeModel(model_name)
    except Exception:
        return None

SYSTEM_INSTRUCTIONS = """Voc√™ √© um assistente t√©cnico para engenharia de software.
- Seja direto, estruturado e did√°tico.
- Quando gerar c√≥digo, use blocos com a linguagem correta (```python, ```go, ```csharp, ```java, ```js).
- Quando propor corre√ß√µes, sempre inclua um *patch* em formato unified diff quando fizer sentido.
- Para testes, proponha skeletons m√≠nimos execut√°veis.
- Se o usu√°rio subir logs/stack traces, identifique causa raiz prov√°vel e passos de diagn√≥stico.
- Nunca invente APIs que n√£o existem; se houver incerteza, declare explicitamente.
"""

def call_gemini(prompt: str, extras: dict | None = None):
    if not API_KEY:
        return "‚ùå GOOGLE_API_KEY ausente. Edite `.env` e recarregue."
    try:
        model = _configure_model()
        if not model:
            return "‚ùå N√£o foi poss√≠vel inicializar o modelo. Verifique a chave e a vers√£o do SDK."
        content_parts = [SYSTEM_INSTRUCTIONS, "\n\n---\n", prompt]
        if extras:
            content_parts.append("\n\nContexto extra:\n")
            content_parts.append(json.dumps(extras, ensure_ascii=False, indent=2))
        resp = model.generate_content(
            content_parts,
            generation_config={"temperature": float(temperature)},
        )
        return getattr(resp, "text", "‚ö†Ô∏è Resposta vazia do modelo.")
    except Exception as e:
        return f"‚ö†Ô∏è Erro ao chamar o modelo: {e}"

    
# ---------------------------
# Views (sem tabs)
# ---------------------------
def render_tests_view():
    st.subheader("Seu gerador de testes unit√°rios com Gemini!")
    st.markdown("""
                Cole um c√≥digo que eu vou te poupar o trabalho dos testes hehe.
                """)
    lang = st.selectbox(
        "Linguagem/Framework alvo",
        ["python/pytest", "go/testing", "csharp/xUnit", "java/junit5", "javascript/jest"],
        index=0,
    )
    code_for_test = st.text_area("C√≥digo-fonte alvo", height=260, placeholder="Cole aqui o c√≥digo...")
    generate = st.button("Gerar testes")
    if generate:
        prompt = f"""
Gere testes unit√°rios para o seguinte c√≥digo.
- Crie casos positivos e negativos.
- D√™ instru√ß√µes de execu√ß√£o (ex.: pytest -q, go test, dotnet test, mvn test, npm test).
- Informe mocks/stubs necess√°rios.
Alvo: {lang}

C√≥digo:
{code_for_test}
"""
        with st.spinner("Gerando testes com Gemini..."):
            st.markdown(call_gemini(prompt))

# Router simples
if view == "üß™ Gerar testes unit√°rios":
    render_tests_view()
